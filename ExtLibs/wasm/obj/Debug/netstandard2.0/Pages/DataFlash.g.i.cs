#pragma checksum "D:\missplan\MissionPlanner\ExtLibs\wasm\Pages\DataFlash.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1ad9eacb8e1c5ec60de6086ac714a238733e2ad8"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace wasm.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using wasm;
    using wasm.Shared;
    using MissionPlanner.Comms;
    using Blazor.FileReader;
    using MissionPlanner;
    using MissionPlanner.Utilities;
    using MissionPlanner.Log;
    using Blazor.Extensions.Canvas;
    using System.Globalization;
    using System.IO;
    using System.Net;
    using System.Net.WebSockets;
    using System.Threading;
    using System.Text;
    using System.Security.Cryptography;
    using Blazor.Extensions;
    using Newtonsoft.Json;
    using Org.BouncyCastle.Utilities.Encoders;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/DataFlash")]
    public class DataFlash : Microsoft.AspNetCore.Blazor.Components.BlazorComponent, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 59 "D:\missplan\MissionPlanner\ExtLibs\wasm\Pages\DataFlash.cshtml"
            
    ElementRef inputTypeFileElement;

    ElementRef checkElementRef;

    CollectionBuffer cb;

    public async void PlotItem(string type, string item)
    {
        plotly line = new plotly(type + "." + item);
        foreach (var msg in cb.GetEnumeratorType(type))
        {
            var itemdata = msg[item];
            if (itemdata == null)
                continue;

            var itemvalue = double.Parse(itemdata, CultureInfo.InvariantCulture);

            line.AddXY(msg.time.ToString("yyyy-MM-dd hh:mm:ss.fff"), itemvalue);
        }

        JSRuntime.Current.InvokeAsync<object>("plotData", new object[] { "div1", line.getJSON() });
    }

    public async Task ReadFile()
    {
        foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            var info = await file.ReadFileInfoAsync();

            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(1024 * 1024 * 5))
            {
                cb = new CollectionBuffer(memoryStream);

                foreach (var msg in cb.GetEnumeratorType("MSG"))
                {
                    Console.WriteLine(msg.msgtype + " " + cb[msg.lineno]);
                }

                plotly linelat = new plotly("Lat");
                plotly linelng = new plotly("Lng");
                plotly linealt = new plotly("Alt");

                plotly linemap = new plotly("Map");
                linemap.root.mode = "linesa";
                linemap.root.type = "scattergeo";

                plotly scatter3d = new plotly("map3d");
                scatter3d.root.type = "scatter3d";
                scatter3d.root.mode = "lines";


                foreach (var msg in cb.GetEnumeratorType("GPS"))
                {
                    var lat = msg["Lat"];
                    var lng = msg["Lng"];
                    var alt = msg["Alt"];
                    if (lat == null)
                        continue;

                    var lat2 = double.Parse(lat, CultureInfo.InvariantCulture);
                    var lng2 = double.Parse(lng, CultureInfo.InvariantCulture);
                    var alt2 = double.Parse(alt, CultureInfo.InvariantCulture);

                    if (lat2 == 0)
                        continue;

                    linelat.AddXY(msg.time.ToString("yyyy-MM-dd hh:mm:ss.fff"), lat2);
                    linelng.AddXY(msg.time.ToString("yyyy-MM-dd hh:mm:ss.fff"), lng2);
                    linealt.AddXY(msg.time.ToString("yyyy-MM-dd hh:mm:ss.fff"), alt2);

                    linemap.AddLatLng(lat2, lng2);

                    scatter3d.AddXYZ(lat2, lng2, alt2);
                }

                JSRuntime.Current.InvokeAsync<object>("plotData", new object[] { "div1", linealt.getJSON() });
                JSRuntime.Current.InvokeAsync<object>("plotData", new object[] { "div2", linemap.getJSON() });
                JSRuntime.Current.InvokeAsync<object>("plotData", new object[] { "div3", scatter3d.getJSON() });
            }
        }

    }

    public void Dispose()
    {
        Http?.Dispose();
    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private IFileReaderService fileReaderService { get; set; }
    }
}
#pragma warning restore 1591
